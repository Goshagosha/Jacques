2022-11-19 17:16:29.019 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	pd.read_csv(<ARG0>)
2022-11-19 17:16:29.038 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	pd.DataFrame(<ARG0>, columns=<LST0>)
2022-11-19 17:16:29.148 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	sort by <LST0> ascending
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[True])
2022-11-19 17:16:29.152 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	drop columns <LST0>
	<PIPE>.drop(columns=<LST0>)
2022-11-19 17:16:29.156 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:16:29.158 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupby(<LST0>)
2022-11-19 17:16:29.161 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:16:29.164 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as json
	<PIPE>.to_json(<ARG0>)
2022-11-19 17:16:30.186 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 17:16:30.193 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg({<ARG1>: <ARG0>}).rename(columns={<ARG1>: <ARG2>})
2022-11-19 17:16:30.198 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg({<ARG1>: <ARG0>}).rename(columns={<ARG1>: <ARG2>})
2022-11-19 17:16:30.396 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	rename columns <ARG0> to <ARG1>
	<PIPE>.rename(columns={<ARG0>: <ARG1>})
2022-11-19 17:16:30.400 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	head <ARG0>
	<PIPE>.head(<ARG0>)
2022-11-19 17:16:31.099 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>[<OPR0>]
2022-11-19 17:16:31.105 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.assign(**{<ARG0>: <PIPE>.apply(lambda row: <OPR0>, axis=1).values})
2022-11-19 17:16:31.324 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	sort by <LST0> descending
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[False])
2022-11-19 17:16:31.326 | INFO     | src.jacques.core.jacques:_add_to_ruleset:110 - Conditional rule: <class 'src.jacques.core.rule.ConditionalRule'>
	sort by <LST0> <CHO0>
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[True])
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[False])
2022-11-19 17:16:31.462 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	replace <ARG0> with <ARG1>
	<PIPE>.replace(<ARG0>, <ARG1>)
2022-11-19 17:16:31.466 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.info(verbose=False)
2022-11-19 17:16:31.699 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	intersection <ARG0>
	<PIPE>.merge(<ARG0>)
2022-11-19 17:16:32.180 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as csv
	<PIPE>.to_csv(<ARG0>)
2022-11-19 17:16:32.183 | INFO     | src.jacques.core.jacques:_add_to_ruleset:110 - Conditional rule: <class 'src.jacques.core.rule.ConditionalRule'>
	save to <ARG0> as <CHO0>
	<PIPE>.to_json(<ARG0>)
	<PIPE>.to_csv(<ARG0>)
2022-11-19 17:16:33.712 | INFO     | src.jacques.core.jacques:process_all_examples:170 - 16 rules generated.
2022-11-19 17:16:33.712 | INFO     | src.jacques.core.jacques:process_all_examples:171 - Examples not exhausted: 3
2022-11-19 17:16:33.713 | INFO     | src.jacques.core.jacques:process_all_examples:173 - <class 'src.jacques.core.example.Example'>
	on data | drop duplicates | difference only_country_deaths | apply mean on 'Confirmed' as 'Mean Confirmed' | select columns 'SNo', 'ObservationDate' | intersection only_country_deaths | show schema
	data.drop_duplicates()[~data.drop_duplicates().isin(only_country_deaths).all(1)].agg({'Confirmed' : 'mean'}).rename(columns={'Confirmed' : 'Mean Confirmed'})[['SNo', 'ObservationDate']].merge(only_country_deaths).info(verbose=False)
2022-11-19 17:16:33.713 | INFO     | src.jacques.core.jacques:process_all_examples:173 - <class 'src.jacques.core.example.Example'>
	on data | sort by 'Confirmed' ascending | apply mean on 'Confirmed' as 'Mean Confirmed' | apply sum on 'Confirmed' as 'Total Confirmed' | union only_country_deaths | replace 'Confirmed' with 'Deaths' | count
	pd.concat([data.sort_values(['Confirmed'], axis='index', ascending=[True]).agg({'Confirmed' : 'mean'}).rename(columns={'Confirmed' : 'Mean Confirmed'}).agg({'Confirmed' : 'sum'}).rename(columns={'Confirmed' : 'Total Confirmed'}), only_country_deaths]).replace('Confirmed', 'Deaths').shape[0]
2022-11-19 17:16:33.714 | INFO     | src.jacques.core.jacques:process_all_examples:173 - <class 'src.jacques.core.example.Example'>
	create dataframe from data with header 'Country/Region', 'Deaths' | rename columns 'Confirmed' to 'Deaths' | apply min on 'Confirmed' as 'Min Confirmed' | sort by 'Confirmed' descending | describe | show
	print(pd.DataFrame(data, columns=['Country/Region', 'Deaths']).rename(columns={'Confirmed': 'Deaths'}).agg({'Confirmed' : 'min'}).rename(columns={'Confirmed' : 'Min Confirmed'}).sort_values(['Confirmed'], axis='index', ascending=[False]).describe())
2022-11-19 17:16:33.714 | INFO     | src.jacques.core.jacques:process_all_examples:174 - Excepted due to parsing errors: 0
2022-11-19 17:16:33.715 | INFO     | src.jacques.core.jacques:process_all_examples:177 - Rules:
2022-11-19 17:16:33.715 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	pd.read_csv(<ARG0>)
2022-11-19 17:16:33.717 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	pd.DataFrame(<ARG0>, columns=<LST0>)
2022-11-19 17:16:33.718 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.ConditionalRule'>
	sort by <LST0> <CHO0>
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[True])
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[False])
2022-11-19 17:16:33.719 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	drop columns <LST0>
	<PIPE>.drop(columns=<LST0>)
2022-11-19 17:16:33.721 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupby(<LST0>)
2022-11-19 17:16:33.722 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:16:33.723 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.ConditionalRule'>
	save to <ARG0> as <CHO0>
	<PIPE>.to_json(<ARG0>)
	<PIPE>.to_csv(<ARG0>)
2022-11-19 17:16:33.724 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 17:16:33.725 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg({<ARG1>: <ARG0>}).rename(columns={<ARG1>: <ARG2>})
2022-11-19 17:16:33.726 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	rename columns <ARG0> to <ARG1>
	<PIPE>.rename(columns={<ARG0>: <ARG1>})
2022-11-19 17:16:33.727 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	head <ARG0>
	<PIPE>.head(<ARG0>)
2022-11-19 17:16:33.728 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>[<OPR0>]
2022-11-19 17:16:33.728 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.assign(**{<ARG0>: <PIPE>.apply(lambda row: <OPR0>, axis=1).values})
2022-11-19 17:16:33.730 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	replace <ARG0> with <ARG1>
	<PIPE>.replace(<ARG0>, <ARG1>)
2022-11-19 17:16:33.731 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.info(verbose=False)
2022-11-19 17:16:33.732 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	intersection <ARG0>
	<PIPE>.merge(<ARG0>)
2022-11-19 17:16:33.734 | INFO     | __main__:<module>:49 - Expected rule 'union' not learned
2022-11-19 17:16:33.735 | INFO     | __main__:<module>:49 - Expected rule 'difference' not learned
2022-11-19 17:16:33.737 | INFO     | __main__:<module>:49 - Expected rule 'select columns' not learned
2022-11-19 17:16:33.739 | INFO     | __main__:<module>:57 - Expected 2 options for rule 'join', but it is not ConditionalRule
2022-11-19 17:16:33.740 | INFO     | __main__:<module>:57 - Expected 4 options for rule 'apply', but it is not ConditionalRule
2022-11-19 17:16:33.742 | INFO     | __main__:<module>:49 - Expected rule 'drop duplicates' not learned
2022-11-19 17:16:33.743 | INFO     | __main__:<module>:49 - Expected rule 'show' not learned
2022-11-19 17:16:33.744 | INFO     | __main__:<module>:49 - Expected rule 'describe' not learned
2022-11-19 17:16:33.745 | INFO     | __main__:<module>:49 - Expected rule 'count' not learned
