2022-11-19 17:18:04.145 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	spark.read.format('csv').option('header', True).load(<ARG0>)
2022-11-19 17:18:04.164 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	spark.createDataFrame(<ARG0>, schema=<LST0>)
2022-11-19 17:18:04.198 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 17:18:04.200 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	drop duplicates
	<PIPE>.dropDuplicates()
2022-11-19 17:18:04.203 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	difference <ARG0>
	<PIPE>.subtract(<ARG0>)
2022-11-19 17:18:04.208 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg(<ARG0>(<ARG1>).alias(<ARG2>))
2022-11-19 17:18:04.212 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	select columns <LST0>
	<PIPE>.select(<LST0>)
2022-11-19 17:18:04.216 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	intersection <ARG0>
	<PIPE>.intersect(<ARG0>)
2022-11-19 17:18:04.219 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.printSchema()
2022-11-19 17:18:04.282 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	sort by <LST0> ascending
	<PIPE>.sort(<LST0>, ascending=[True])
2022-11-19 17:18:04.286 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	union <ARG0>
	<PIPE>.unionByName(<ARG0>)
2022-11-19 17:18:04.290 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	replace <ARG0> with <ARG1>
	<PIPE>.replace(<ARG0>, <ARG1>)
2022-11-19 17:18:04.293 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	count
	<PIPE>.count()
2022-11-19 17:18:04.493 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	rename columns <ARG0> to <ARG1>
	<PIPE>.withColumnRenamed(<ARG0>, <ARG1>)
2022-11-19 17:18:04.531 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:18:04.534 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	head <ARG0>
	<PIPE>.head(<ARG0>)
2022-11-19 17:18:04.738 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as <ARG1>
	<PIPE>.write.format(<ARG1>).save(<ARG0>)
2022-11-19 17:18:05.562 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	drop columns <LST0>
	<PIPE>.drop(<LST0>)
2022-11-19 17:18:05.567 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupBy(<LST0>)
2022-11-19 17:18:05.918 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>.filter(<OPR0>)
2022-11-19 17:18:05.922 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.withColumn(<ARG0>, <OPR0>)
2022-11-19 17:18:06.134 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	sort by <LST0> descending
	<PIPE>.sort(<LST0>, ascending=[False])
2022-11-19 17:18:06.136 | INFO     | src.jacques.core.jacques:_add_to_ruleset:110 - Conditional rule: <class 'src.jacques.core.rule.ConditionalRule'>
	sort by <LST0> <CHO0>
	<PIPE>.sort(<LST0>, ascending=[True])
	<PIPE>.sort(<LST0>, ascending=[False])
2022-11-19 17:18:06.721 | INFO     | src.jacques.core.jacques:process_all_examples:170 - 21 rules generated.
2022-11-19 17:18:06.722 | INFO     | src.jacques.core.jacques:process_all_examples:171 - Examples not exhausted: 1
2022-11-19 17:18:06.722 | INFO     | src.jacques.core.jacques:process_all_examples:173 - <class 'src.jacques.core.example.Example'>
	create dataframe from data with header 'Country/Region', 'Deaths' | rename columns 'Confirmed' to 'Deaths' | apply min on 'Confirmed' as 'Min Confirmed' | sort by 'Confirmed' descending | describe | show
	spark.createDataFrame(data, schema=['Country/Region', 'Deaths']).withColumnRenamed('Confirmed', 'Deaths').agg(min('Confirmed').alias('Min Confirmed')).sort(['Confirmed'], ascending=[False]).describe().show()
2022-11-19 17:18:06.722 | INFO     | src.jacques.core.jacques:process_all_examples:174 - Excepted due to parsing errors: 0
2022-11-19 17:18:06.723 | INFO     | src.jacques.core.jacques:process_all_examples:177 - Rules:
2022-11-19 17:18:06.723 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	spark.read.format('csv').option('header', True).load(<ARG0>)
2022-11-19 17:18:06.724 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	spark.createDataFrame(<ARG0>, schema=<LST0>)
2022-11-19 17:18:06.724 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 17:18:06.724 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	drop duplicates
	<PIPE>.dropDuplicates()
2022-11-19 17:18:06.725 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	difference <ARG0>
	<PIPE>.subtract(<ARG0>)
2022-11-19 17:18:06.726 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg(<ARG0>(<ARG1>).alias(<ARG2>))
2022-11-19 17:18:06.727 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	select columns <LST0>
	<PIPE>.select(<LST0>)
2022-11-19 17:18:06.728 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	intersection <ARG0>
	<PIPE>.intersect(<ARG0>)
2022-11-19 17:18:06.728 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.printSchema()
2022-11-19 17:18:06.729 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.ConditionalRule'>
	sort by <LST0> <CHO0>
	<PIPE>.sort(<LST0>, ascending=[True])
	<PIPE>.sort(<LST0>, ascending=[False])
2022-11-19 17:18:06.729 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	union <ARG0>
	<PIPE>.unionByName(<ARG0>)
2022-11-19 17:18:06.731 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	replace <ARG0> with <ARG1>
	<PIPE>.replace(<ARG0>, <ARG1>)
2022-11-19 17:18:06.731 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	count
	<PIPE>.count()
2022-11-19 17:18:06.731 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	rename columns <ARG0> to <ARG1>
	<PIPE>.withColumnRenamed(<ARG0>, <ARG1>)
2022-11-19 17:18:06.732 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:18:06.733 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	head <ARG0>
	<PIPE>.head(<ARG0>)
2022-11-19 17:18:06.734 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as <ARG1>
	<PIPE>.write.format(<ARG1>).save(<ARG0>)
2022-11-19 17:18:06.734 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	drop columns <LST0>
	<PIPE>.drop(<LST0>)
2022-11-19 17:18:06.735 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupBy(<LST0>)
2022-11-19 17:18:06.738 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>.filter(<OPR0>)
2022-11-19 17:18:06.739 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.withColumn(<ARG0>, <OPR0>)
2022-11-19 17:18:06.741 | INFO     | __main__:<module>:57 - Expected 2 options for rule 'save to', but it is not ConditionalRule
2022-11-19 17:18:06.745 | INFO     | __main__:<module>:57 - Expected 2 options for rule 'join', but it is not ConditionalRule
2022-11-19 17:18:06.747 | INFO     | __main__:<module>:57 - Expected 4 options for rule 'apply', but it is not ConditionalRule
2022-11-19 17:18:06.749 | INFO     | __main__:<module>:49 - Expected rule 'show' not learned
2022-11-19 17:18:06.751 | INFO     | __main__:<module>:49 - Expected rule 'describe' not learned
