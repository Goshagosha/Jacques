2022-11-19 17:16:46.387 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	pd.read_csv(<ARG0>)
2022-11-19 17:16:46.407 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	pd.DataFrame(<ARG0>, columns=<LST0>)
2022-11-19 17:16:46.559 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 17:16:46.562 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupby(<LST0>)
2022-11-19 17:16:46.567 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	rename columns <ARG0> to <ARG1>
	<PIPE>.rename(columns={<ARG0>: <ARG1>})
2022-11-19 17:16:46.571 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	sort by <LST0> descending
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[False])
2022-11-19 17:16:46.575 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>[<OPR0>]
2022-11-19 17:16:46.577 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	select columns <LST0>
	<PIPE>[<LST0>]
2022-11-19 17:16:46.581 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	describe
	<PIPE>.describe()
2022-11-19 17:16:46.680 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg({<ARG1>: <ARG0>}).rename(columns={<ARG1>: <ARG2>})
2022-11-19 17:16:46.720 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:16:46.728 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	drop duplicates
	<PIPE>.drop_duplicates()
2022-11-19 17:16:46.732 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:16:46.736 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	union <ARG0>
	pd.concat([<PIPE>, <ARG0>])
2022-11-19 17:16:46.742 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	show
	print(<PIPE>)
2022-11-19 17:16:46.786 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as csv
	<PIPE>.to_csv(<ARG0>)
2022-11-19 17:16:46.894 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as json
	<PIPE>.to_json(<ARG0>)
2022-11-19 17:16:46.896 | INFO     | src.jacques.core.jacques:_add_to_ruleset:110 - Conditional rule: <class 'src.jacques.core.rule.ConditionalRule'>
	save to <ARG0> as <CHO0>
	<PIPE>.to_csv(<ARG0>)
	<PIPE>.to_json(<ARG0>)
2022-11-19 17:16:46.965 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	head <ARG0>
	<PIPE>.head(<ARG0>)
2022-11-19 17:16:46.966 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	count
	<PIPE>.shape[0]
2022-11-19 17:16:47.178 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.assign(**{<ARG0>: <PIPE>.apply(lambda row: <OPR0>, axis=1).values})
2022-11-19 17:16:47.571 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	difference <ARG0>
	<PIPE>[~<PIPE>.isin(<ARG0>).all(1)]
2022-11-19 17:16:48.515 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	sort by <LST0> ascending
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[True])
2022-11-19 17:16:48.519 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.info(verbose=False)
2022-11-19 17:16:48.522 | INFO     | src.jacques.core.jacques:_add_to_ruleset:110 - Conditional rule: <class 'src.jacques.core.rule.ConditionalRule'>
	sort by <LST0> <CHO0>
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[False])
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[True])
2022-11-19 17:16:50.379 | INFO     | src.jacques.core.jacques:process_all_examples:170 - 20 rules generated.
2022-11-19 17:16:50.381 | INFO     | src.jacques.core.jacques:process_all_examples:171 - Examples not exhausted: 3
2022-11-19 17:16:50.381 | INFO     | src.jacques.core.jacques:process_all_examples:173 - <class 'src.jacques.core.example.Example'>
	on data | drop columns 'Confirmed' | apply max on 'Confirmed' as 'Max Confirmed' | append column 'Confirmed' - 'Recovered' as 'Deaths' | join inner only_country_deaths on 'Country/Region' | replace 'Confirmed' with 'Deaths' | show schema
	data.drop(columns=['Confirmed']).agg({'Confirmed' : 'max'}).rename(columns={'Confirmed' : 'Max Confirmed'}).assign(**{'Deaths': data.drop(columns=['Confirmed']).agg({'Confirmed' : 'max'}).rename(columns={'Confirmed' : 'Max Confirmed'}).apply(lambda row: 'Confirmed' - 'Recovered', axis=1).values}).join(only_country_deaths, on=['Country/Region'], how='inner').replace('Confirmed', 'Deaths').info(verbose=False)
2022-11-19 17:16:50.383 | INFO     | src.jacques.core.jacques:process_all_examples:173 - <class 'src.jacques.core.example.Example'>
	on data | apply max on 'Confirmed' as 'Max Confirmed' | group by 'Country/Region' | sort by 'Confirmed' ascending | intersection only_country_deaths | drop columns 'Confirmed' | describe
	data.agg({'Confirmed' : 'max'}).rename(columns={'Confirmed' : 'Max Confirmed'}).groupby(['Country/Region']).sort_values(['Confirmed'], axis='index', ascending=[True]).merge(only_country_deaths).drop(columns=['Confirmed']).describe()
2022-11-19 17:16:50.384 | INFO     | src.jacques.core.jacques:process_all_examples:173 - <class 'src.jacques.core.example.Example'>
	create dataframe from data with header 'Country/Region', 'Deaths' | intersection only_country_deaths | replace 'Confirmed' with 'Deaths' | union only_country_deaths | save to 'output.csv' as csv
	pd.concat([pd.DataFrame(data, columns=['Country/Region', 'Deaths']).merge(only_country_deaths).replace('Confirmed', 'Deaths'), only_country_deaths]).to_csv('output.csv')
2022-11-19 17:16:50.386 | INFO     | src.jacques.core.jacques:process_all_examples:174 - Excepted due to parsing errors: 0
2022-11-19 17:16:50.387 | INFO     | src.jacques.core.jacques:process_all_examples:177 - Rules:
2022-11-19 17:16:50.388 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	pd.read_csv(<ARG0>)
2022-11-19 17:16:50.390 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	pd.DataFrame(<ARG0>, columns=<LST0>)
2022-11-19 17:16:50.391 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 17:16:50.393 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupby(<LST0>)
2022-11-19 17:16:50.394 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	rename columns <ARG0> to <ARG1>
	<PIPE>.rename(columns={<ARG0>: <ARG1>})
2022-11-19 17:16:50.396 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.ConditionalRule'>
	sort by <LST0> <CHO0>
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[False])
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[True])
2022-11-19 17:16:50.399 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>[<OPR0>]
2022-11-19 17:16:50.401 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	select columns <LST0>
	<PIPE>[<LST0>]
2022-11-19 17:16:50.403 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	describe
	<PIPE>.describe()
2022-11-19 17:16:50.405 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg({<ARG1>: <ARG0>}).rename(columns={<ARG1>: <ARG2>})
2022-11-19 17:16:50.406 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	drop duplicates
	<PIPE>.drop_duplicates()
2022-11-19 17:16:50.408 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:16:50.409 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	union <ARG0>
	pd.concat([<PIPE>, <ARG0>])
2022-11-19 17:16:50.411 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	show
	print(<PIPE>)
2022-11-19 17:16:50.413 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.ConditionalRule'>
	save to <ARG0> as <CHO0>
	<PIPE>.to_csv(<ARG0>)
	<PIPE>.to_json(<ARG0>)
2022-11-19 17:16:50.414 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	head <ARG0>
	<PIPE>.head(<ARG0>)
2022-11-19 17:16:50.416 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	count
	<PIPE>.shape[0]
2022-11-19 17:16:50.417 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.assign(**{<ARG0>: <PIPE>.apply(lambda row: <OPR0>, axis=1).values})
2022-11-19 17:16:50.418 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	difference <ARG0>
	<PIPE>[~<PIPE>.isin(<ARG0>).all(1)]
2022-11-19 17:16:50.420 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.info(verbose=False)
2022-11-19 17:16:50.423 | INFO     | __main__:<module>:49 - Expected rule 'intersection' not learned
2022-11-19 17:16:50.426 | INFO     | __main__:<module>:49 - Expected rule 'drop columns' not learned
2022-11-19 17:16:50.428 | INFO     | __main__:<module>:57 - Expected 2 options for rule 'join', but it is not ConditionalRule
2022-11-19 17:16:50.430 | INFO     | __main__:<module>:57 - Expected 4 options for rule 'apply', but it is not ConditionalRule
2022-11-19 17:16:50.431 | INFO     | __main__:<module>:49 - Expected rule 'replace' not learned
