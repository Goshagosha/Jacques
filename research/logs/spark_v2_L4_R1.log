2022-11-19 17:17:14.643 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	spark.createDataFrame(<ARG0>, schema=<LST0>)
2022-11-19 17:17:14.687 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	show
	data.select(['SNo', 'ObservationDate']).sort(['Confirmed'], ascending=[True]).show(10)
2022-11-19 17:17:14.710 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 17:17:14.714 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	replace <ARG0> with <ARG1>
	<PIPE>.replace(<ARG0>, <ARG1>)
2022-11-19 17:17:14.718 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>.filter(<OPR0>)
2022-11-19 17:17:14.720 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	intersection <ARG0>
	<PIPE>.intersect(<ARG0>)
2022-11-19 17:17:14.722 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	describe
	<PIPE>.describe()
2022-11-19 17:17:14.786 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	drop duplicates
	<PIPE>.dropDuplicates()
2022-11-19 17:17:14.788 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.printSchema()
2022-11-19 17:17:15.113 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	spark.read.format('csv').option('header', True).load(<ARG0>)
2022-11-19 17:17:15.228 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	count
	<PIPE>.count()
2022-11-19 17:17:15.344 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	drop columns <LST0>
	<PIPE>.drop(<LST0>)
2022-11-19 17:17:15.349 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as <ARG1>
	<PIPE>.write.format(<ARG1>).save(<ARG0>)
2022-11-19 17:17:15.468 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:17:15.472 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg(<ARG0>(<ARG1>).alias(<ARG2>))
2022-11-19 17:17:15.660 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.withColumn(<ARG0>, <OPR0>)
2022-11-19 17:17:15.976 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupBy(<LST0>)
2022-11-19 17:17:16.560 | INFO     | src.jacques.core.jacques:process_all_examples:170 - 17 rules generated.
2022-11-19 17:17:16.560 | INFO     | src.jacques.core.jacques:process_all_examples:171 - Examples not exhausted: 2
2022-11-19 17:17:16.561 | INFO     | src.jacques.core.jacques:process_all_examples:173 - <class 'src.jacques.core.example.Example'>
	data = load from 'covid_19_data.csv' as csv_with_header | sort by 'Confirmed' descending | rename columns 'Confirmed' to 'Deaths' | apply sum on 'Confirmed' as 'Total Confirmed'
	data = spark.read.format('csv').option("header", True).load('covid_19_data.csv').sort(['Confirmed'], ascending=[False]).withColumnRenamed('Confirmed', 'Deaths').agg(sum('Confirmed').alias('Total Confirmed'))
2022-11-19 17:17:16.564 | INFO     | src.jacques.core.jacques:process_all_examples:173 - <class 'src.jacques.core.example.Example'>
	on data | difference only_country_deaths | union only_country_deaths | drop columns 'Confirmed' | save to 'output.json' as json
	data.subtract(only_country_deaths).unionByName(only_country_deaths).drop(['Confirmed']).write.format('json').save('output.json')
2022-11-19 17:17:16.565 | INFO     | src.jacques.core.jacques:process_all_examples:174 - Excepted due to parsing errors: 0
2022-11-19 17:17:16.565 | INFO     | src.jacques.core.jacques:process_all_examples:177 - Rules:
2022-11-19 17:17:16.566 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	spark.createDataFrame(<ARG0>, schema=<LST0>)
2022-11-19 17:17:16.567 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	show
	data.select(['SNo', 'ObservationDate']).sort(['Confirmed'], ascending=[True]).show(10)
2022-11-19 17:17:16.568 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 17:17:16.569 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	replace <ARG0> with <ARG1>
	<PIPE>.replace(<ARG0>, <ARG1>)
2022-11-19 17:17:16.570 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>.filter(<OPR0>)
2022-11-19 17:17:16.571 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	intersection <ARG0>
	<PIPE>.intersect(<ARG0>)
2022-11-19 17:17:16.572 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	describe
	<PIPE>.describe()
2022-11-19 17:17:16.573 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	drop duplicates
	<PIPE>.dropDuplicates()
2022-11-19 17:17:16.573 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.printSchema()
2022-11-19 17:17:16.574 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	spark.read.format('csv').option('header', True).load(<ARG0>)
2022-11-19 17:17:16.576 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	count
	<PIPE>.count()
2022-11-19 17:17:16.577 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	drop columns <LST0>
	<PIPE>.drop(<LST0>)
2022-11-19 17:17:16.578 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as <ARG1>
	<PIPE>.write.format(<ARG1>).save(<ARG0>)
2022-11-19 17:17:16.579 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 17:17:16.580 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg(<ARG0>(<ARG1>).alias(<ARG2>))
2022-11-19 17:17:16.581 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.withColumn(<ARG0>, <OPR0>)
2022-11-19 17:17:16.582 | INFO     | src.jacques.core.jacques:process_all_examples:179 - <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupBy(<LST0>)
2022-11-19 17:17:16.584 | INFO     | __main__:<module>:57 - Expected 2 options for rule 'save to', but it is not ConditionalRule
2022-11-19 17:17:16.585 | INFO     | __main__:<module>:49 - Expected rule 'union' not learned
2022-11-19 17:17:16.587 | INFO     | __main__:<module>:49 - Expected rule 'difference' not learned
2022-11-19 17:17:16.588 | INFO     | __main__:<module>:49 - Expected rule 'select columns' not learned
2022-11-19 17:17:16.589 | INFO     | __main__:<module>:57 - Expected 2 options for rule 'join', but it is not ConditionalRule
2022-11-19 17:17:16.591 | INFO     | __main__:<module>:57 - Expected 4 options for rule 'apply', but it is not ConditionalRule
2022-11-19 17:17:16.592 | INFO     | __main__:<module>:49 - Expected rule 'sort by' not learned
2022-11-19 17:17:16.593 | INFO     | __main__:<module>:49 - Expected rule 'rename columns' not learned
2022-11-19 17:17:16.595 | INFO     | __main__:<module>:49 - Expected rule 'head' not learned
