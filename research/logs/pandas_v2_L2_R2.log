2022-11-19 14:05:15.491 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	pd.read_csv(<ARG0>)
2022-11-19 14:05:15.494 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as csv
	<PIPE>.to_csv(<ARG0>)
2022-11-19 14:05:15.535 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 14:05:15.538 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	sort by <LST0> descending
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[False])
2022-11-19 14:05:15.542 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	select columns <LST0>
	<PIPE>[<LST0>]
2022-11-19 14:05:15.601 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	rename columns <ARG0> to <ARG1>
	<PIPE>.rename(columns={<ARG0>: <ARG1>})
2022-11-19 14:05:15.605 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	drop columns <LST0>
	<PIPE>.drop(columns=<LST0>)
2022-11-19 14:05:15.672 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	drop duplicates
	<PIPE>.drop_duplicates()
2022-11-19 14:05:15.700 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	sort by <LST0> ascending
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[True])
2022-11-19 14:05:15.705 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 14:05:15.709 | INFO     | src.jacques.core.jacques:_add_to_ruleset:109 - Conditional rule: <class 'src.jacques.core.rule.ConditionalRule'>
	sort by <LST0> <CHO0>
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[False])
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[True])
2022-11-19 14:05:15.743 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	intersection <ARG0>
	<PIPE>.merge(<ARG0>)
2022-11-19 14:05:15.747 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	save to <ARG0> as json
	<PIPE>.to_json(<ARG0>)
2022-11-19 14:05:15.750 | INFO     | src.jacques.core.jacques:_add_to_ruleset:109 - Conditional rule: <class 'src.jacques.core.rule.ConditionalRule'>
	save to <ARG0> as <CHO0>
	<PIPE>.to_csv(<ARG0>)
	<PIPE>.to_json(<ARG0>)
2022-11-19 14:05:15.813 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	replace <ARG0> with <ARG1>
	<PIPE>.replace(<ARG0>, <ARG1>)
2022-11-19 14:05:15.844 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg({<ARG1>: <ARG0>}).rename(columns={<ARG1>: <ARG2>})
2022-11-19 14:05:15.884 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	show
	print(<PIPE>)
2022-11-19 14:05:15.919 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	describe
	<PIPE>.describe()
2022-11-19 14:05:15.950 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>[<OPR0>]
2022-11-19 14:05:15.986 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	difference <ARG0>
	<PIPE>[~<PIPE>.isin(<ARG0>).all(1)]
2022-11-19 14:05:16.026 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	count
	<PIPE>.shape[0]
2022-11-19 14:05:16.090 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	union <ARG0>
	pd.concat([<PIPE>, <ARG0>])
2022-11-19 14:05:16.183 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupby(<LST0>)
2022-11-19 14:05:16.214 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	head <ARG0>
	<PIPE>.head(<ARG0>)
2022-11-19 14:05:16.275 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.info(verbose=False)
2022-11-19 14:05:16.328 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	pd.DataFrame(<ARG0>, columns=<LST0>)
2022-11-19 14:05:16.471 | INFO     | src.jacques.core.rule_synthesizer:from_example:34 - Generated rule: <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.assign(**{<ARG0>: <PIPE>.apply(lambda row: <OPR0>, axis=1).values})
2022-11-19 14:05:16.755 | INFO     | src.jacques.core.jacques:process_all_examples:160 - 23 rules generated.
2022-11-19 14:05:16.756 | INFO     | src.jacques.core.jacques:process_all_examples:161 - Examples not exhausted: 0
2022-11-19 14:05:16.757 | INFO     | src.jacques.core.jacques:process_all_examples:164 - Excepted due to parsing errors: 0
2022-11-19 14:05:16.758 | INFO     | src.jacques.core.jacques:process_all_examples:167 - Rules:
2022-11-19 14:05:16.759 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	load from <ARG0> as csv_with_header
	pd.read_csv(<ARG0>)
2022-11-19 14:05:16.760 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.ConditionalRule'>
	save to <ARG0> as <CHO0>
	<PIPE>.to_csv(<ARG0>)
	<PIPE>.to_json(<ARG0>)
2022-11-19 14:05:16.761 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	on <ARG0>
	<ARG0>
2022-11-19 14:05:16.762 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.ConditionalRule'>
	sort by <LST0> <CHO0>
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[False])
	<PIPE>.sort_values(<LST0>, axis='index', ascending=[True])
2022-11-19 14:05:16.763 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	select columns <LST0>
	<PIPE>[<LST0>]
2022-11-19 14:05:16.764 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	rename columns <ARG0> to <ARG1>
	<PIPE>.rename(columns={<ARG0>: <ARG1>})
2022-11-19 14:05:16.766 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	drop columns <LST0>
	<PIPE>.drop(columns=<LST0>)
2022-11-19 14:05:16.767 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	drop duplicates
	<PIPE>.drop_duplicates()
2022-11-19 14:05:16.768 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	join <ARG0> <ARG1> on <LST0>
	<PIPE>.join(<ARG1>, on=<LST0>, how=<ARG0>)
2022-11-19 14:05:16.771 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	intersection <ARG0>
	<PIPE>.merge(<ARG0>)
2022-11-19 14:05:16.772 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	replace <ARG0> with <ARG1>
	<PIPE>.replace(<ARG0>, <ARG1>)
2022-11-19 14:05:16.773 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	apply <ARG0> on <ARG1> as <ARG2>
	<PIPE>.agg({<ARG1>: <ARG0>}).rename(columns={<ARG1>: <ARG2>})
2022-11-19 14:05:16.775 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	show
	print(<PIPE>)
2022-11-19 14:05:16.778 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	describe
	<PIPE>.describe()
2022-11-19 14:05:16.779 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	select rows <OPR0>
	<PIPE>[<OPR0>]
2022-11-19 14:05:16.779 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	difference <ARG0>
	<PIPE>[~<PIPE>.isin(<ARG0>).all(1)]
2022-11-19 14:05:16.780 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	count
	<PIPE>.shape[0]
2022-11-19 14:05:16.781 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	union <ARG0>
	pd.concat([<PIPE>, <ARG0>])
2022-11-19 14:05:16.783 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	group by <LST0>
	<PIPE>.groupby(<LST0>)
2022-11-19 14:05:16.784 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	head <ARG0>
	<PIPE>.head(<ARG0>)
2022-11-19 14:05:16.784 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	show schema
	<PIPE>.info(verbose=False)
2022-11-19 14:05:16.788 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	create dataframe from <ARG0> with header <LST0>
	pd.DataFrame(<ARG0>, columns=<LST0>)
2022-11-19 14:05:16.789 | INFO     | src.jacques.core.jacques:process_all_examples:169 - <class 'src.jacques.core.rule.Rule'>
	append column <OPR0> as <ARG0>
	<PIPE>.assign(**{<ARG0>: <PIPE>.apply(lambda row: <OPR0>, axis=1).values})
2022-11-19 14:05:16.794 | INFO     | __main__:<module>:57 - Expected 2 options for rule 'join', but it is not ConditionalRule
2022-11-19 14:05:16.795 | INFO     | __main__:<module>:57 - Expected 4 options for rule 'apply', but it is not ConditionalRule
